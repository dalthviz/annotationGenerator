[comment encoding = UTF-8 /]
[module entities('http://www.eclipse.org/uml2/5.0.0/UML')]
[import ::utils /]

[template public mainEntity(c : Class, path : String)]
[c.genEntity(path.concat('entities/'))/]
[/template]

[template protected genEntity(c : Class, path : String) {className : String = c.getEntityName();}]
[file (path.concat(className+'.java'), false, 'UTF-8')]
/*
[c.getModel().license()/]
*/
package [c.getModel().baseGroup()/].entities;

import java.util.List;

import javax.persistence.CascadeType;
import javax.persistence.Inheritance;
import javax.persistence.InheritanceType;
import javax.persistence.OneToOne;
import java.io.Serializable;
import javax.persistence.Entity;
import co.edu.uniandes.csw.crud.spi.entity.BaseEntity;
[c.setImportsSharedRelation()/]
import java.util.Date;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;
import uk.co.jemos.podam.common.PodamStrategyValue;

import uk.co.jemos.podam.common.PodamExclude;
[if (c.hasRelationshipAttributes())]
[for (s : String | c.getJPAAnnotations())]
import javax.persistence.[s/];
[/for]
[if (c.isMaster())]
import java.util.List;
import java.util.ArrayList;
[/if]
[/if]
[if (c.hasCompositeAssociations() or c.hasOne2OneCompositeAssociations())]
import javax.persistence.CascadeType;
[/if]
[if (c.hasReferences(true))]
import javax.persistence.FetchType;
[/if]
[if (c.has2Relationships())]import javax.persistence.JoinTable;[/if]
[if (c.isFatherGeneralization())]
import javax.persistence.Inheritance;
import javax.persistence.InheritanceType;
[elseif(c.isGeneralization())]
import javax.persistence.PrimaryKeyJoinColumn;
[/if]
import co.edu.uniandes.annotation.FP;

/**
 * @generated
 */
@Entity
[if (c.isFatherGeneralization())]
@Inheritance(strategy=InheritanceType.JOINED)
[elseif(c.isGeneralization())]
@PrimaryKeyJoinColumn(name="[c.generalization.general.name/]_ID")
[/if]
@FP(useCases = { "[c.name/]"
[if (not isCompositeChild())]
				,"['getAll'.concat(c.name) /]",
				 "['get'.concat(c.name) /]",
				 "['create'.concat(c.name) /]",
                 "['update'.concat(c.name) /]", 
				 "['delete'.concat(c.name) /]"
[/if]
[for (a : Property | c.getRelationshipAttributes())]
				 ,"['getAll'.concat(c.name).concat(a.getClass().name) /]",
				 "['get'.concat(c.name).concat(a.getClass().name) /]",
				 "['add'.concat(c.name).concat(a.getClass().name) /]",
				 "['update'.concat(c.name).concat(a.getClass().name) /]",
				 "['remove'.concat(c.name).concat(a.getClass().name) /]"
[/for]
[for (a : Property | c.getCompositeRelationshipAttributes())]
				 , "['getAll'.concat(c.name).concat(a.getClass().name) /]",
				 "['get'.concat(c.name).concat(a.getClass().name) /]",
				 "['create'.concat(c.name).concat(a.getClass().name) /]",
			     "['update'.concat(c.name).concat(a.getClass().name) /]",
				 "['remove'.concat(c.name).concat(a.getClass().name) /]"
[/for]
[for (a : Relationship | c.getRelationships())]
		[if (a.eGet('name').toString().endsWith('_'.concat(c.name)))]
				, "['getAll'.concat(a.eGet('name').toString().replace('_', '').toString()) /]",
				 "['get'.concat(a.eGet('name').toString().replace('_', '').toString()) /]",
				 "['create'.concat(a.eGet('name').toString().replace('_', '').toString()) /]",
			     "['update'.concat(a.eGet('name').toString().replace('_', '').toString()) /]",
				 "['remove'.concat(a.eGet('name').toString().replace('_', '').toString()) /]"
		[/if]
[/for]
				 })
public class [className/] extends [if(c.isGeneralization())][c.getGeneralizationClass().getEntityName()/][else]BaseEntity[/if] implements Serializable {

[c.setEntityManyToManyShared()/]

[for (a : Property | c.allAttributes()->reject(isID() or isName()))]

    [if (a.isDate())]
    @Temporal(TemporalType.DATE)
    [/if]
[if (a.type.name = null or a.type.name = '' )]
[if (a.type.toString().contains('Integer'))]
	private Integer [a.name.toLowerFirst()/];
[elseif (a.type.toString().contains('BigDecimal'))]
	private Long [a.name.toLowerFirst()/];
[elseif (a.type.toString().contains('Boolean'))]
	private boolean [a.name.toLowerFirst()/];
[elseif (a.type.toString().contains('Date'))]
	@Temporal(TemporalType.DATE)
    private Date [a.name.toLowerFirst()/];
[elseif (a.type.toString().contains('String'))]
	private String [a.name.toLowerFirst()/];
[/if]
[else]
	private [a.type.name/] [a.name.toLowerFirst()/];
[/if]
[/for]
[for (a : Property | c.getRelationshipAttributes())]

    @PodamExclude
    @[a.getJPAAnnotation()/][a.genParameters()/]
    [if (a.has2Relationships(c) and not a.isComposite())]
    @JoinTable(name = "[c.name/]_[a.name.toUpper()/]")
    [/if]
    [if (a.getUpper() = 1)]
    private [a.getClass().getEntityName()/] [a.name/];
    [else]
    private List<[a.getClass().getEntityName()/]> [a.name/] = new ArrayList<>();
    [/if]
[/for]
[for (a : Property | c.getCompositeRelationshipAttributes())]

    @PodamExclude
    [if (a.has2Relationships(c) and not a.isComposite())]
    @JoinTable(name = "[c.name/]_[a.name.toUpper()/]")
    [/if]
    [if (a.getUpper() = 1)]
    private [a.getClass().getEntityName()/] [a.name/];
    [else]
    private List<[a.getClass().getEntityName()/]> [a.name/] = new ArrayList<>();
    [/if]
[/for]
[for (a : Property | c.allAttributes()->reject(isID() or isName()))]

    /**
     * Obtiene el atributo [a.name.toLowerFirst()/].
     *
     * @return atributo [a.name.toLowerFirst()/].
     * @generated
     */
[if (a.type.name = null or a.type.name = '' )]
[if (a.type.toString().contains('Integer'))]
	public Integer [a.getter()/](){
[elseif (a.type.toString().contains('BigDecimal'))]
	public Long [a.getter()/](){
[elseif (a.type.toString().contains('Boolean'))]
	public boolean [a.getter()/](){
[elseif (a.type.toString().contains('Date'))]
	public Date [a.getter()/](){
[elseif (a.type.toString().contains('String'))]
	public String [a.getter()/](){
[/if]
[else]
	public [a.type.name/] [a.getter()/](){
[/if]
        return [a.name.toLowerFirst()/];
    }

    /**
     * Establece el valor del atributo [a.name.toLowerFirst()/].
     *
     * @param [a.name.toLowerFirst()/] nuevo valor del atributo
     * @generated
     */
[if (a.type.name = null or a.type.name = '' )]
[if (a.type.toString().contains('Integer'))]
    public void [a.setter()/](Integer [a.name.toLowerFirst()/]){
[elseif (a.type.toString().contains('BigDecimal'))]
    public void [a.setter()/](Long [a.name.toLowerFirst()/]){
[elseif (a.type.toString().contains('Boolean'))]
    public void [a.setter()/](Boolean [a.name.toLowerFirst()/]){
[elseif (a.type.toString().contains('Date'))]
    public void [a.setter()/](Date [a.name.toLowerFirst()/]){
[elseif (a.type.toString().contains('String'))]
    public void [a.setter()/](String [a.name.toLowerFirst()/]){
[/if]
[else]
    public void [a.setter()/]([a.type.name/] [a.name.toLowerFirst()/]){
[/if]
        this.[a.name.toLowerFirst()/] = [a.name.toLowerFirst()/];
    }
[/for]
[for (a : Property | c.getReferences(true))]

    /**
     * Obtiene el atributo [a.name/].
     *
     * @return atributo [a.name/].
     * @generated
     */
    public [a.getClass().getEntityName()/] [a.getter()/]() {
        return [a.name/];
    }

    /**
     * Establece el valor del atributo [a.name/].
     *
     * @param [a.name/] nuevo valor del atributo
     * @generated
     */
    public void [a.setter()/]([a.getClass().getEntityName()/] [a.name.toLower()/]) {
        this.[a.name/] = [a.name.toLower()/];
    }
[/for]
[for (a : Property | c.getCollectionAttributes())]

    /**
     * Obtiene la colección de [a.name/].
     *
     * @return colección [a.name/].
     * @generated
     */
    public List<[a.getClass().getEntityName()/]> [a.getter()/]() {
        return [a.name/];
    }

    /**
     * Establece el valor de la colección de [a.name/].
     *
     * @param [a.name/] nuevo valor de la colección.
     * @generated
     */
    public void [a.setter()/](List<[a.getClass().getEntityName()/]> [a.name.toLower()/]) {
        this.[a.name/] = [a.name.toLower()/];
    }
[/for]
[c.setEntityGetterAndSettersManyToManyShared()/]
[for (a : Property | c.getCompositeRelationshipAttributes())]
	[if (a.getUpper() <> 1)]
    /**
     * Obtiene la colección de [a.name/].
     *
     * @return colección [a.name/].
     * @generated
     */
    public List<[a.getClass().getEntityName()/]> [a.getter()/]() {
        return [a.name/];
    }

    /**
     * Establece el valor de la colección de [a.name/].
     *
     * @param [a.name/] nuevo valor de la colección.
     * @generated
     */
    public void [a.setter()/](List<[a.getClass().getEntityName()/]> [a.name.toLower()/]) {
        this.[a.name/] = [a.name.toLower()/];
    }
	[else]
    /**
     * Obtiene el atributo [a.name/].
     *
     * @return atributo [a.name/].
     * @generated
     */
    public [a.getClass().getEntityName()/] [a.getter()/]() {
        return [a.name/];
    }

    /**
     * Establece el valor del atributo [a.name/].
     *
     * @param [a.name/] nuevo valor del atributo
     * @generated
     */
    public void [a.setter()/]([a.getClass().getEntityName()/] [a.name.toLower()/]) {
        this.[a.name/] = [a.name.toLower()/];
    }
	[/if]
[/for]
}

[/file]
[/template]

[template protected genParameters(a : Property)]
[if (a.isOne2One() and a.isComposite())]
(mappedBy = "[a.getOtherEnd().name/]", cascade = CascadeType.REMOVE)[elseif (a.isOne2One() and not a.isComposite())]
(fetch=FetchType.LAZY)[elseif (not a.isRelationshipOwner() and a.isComposite())]
(mappedBy = "[a.getOtherEnd().name/]", cascade = CascadeType.REMOVE)[elseif (not a.isRelationshipOwner())]
(mappedBy = "[a.getOtherEnd().name/]")[elseif (a.isComposite())] 
(cascade = CascadeType.ALL, orphanRemoval = true)[/if]
[/template]

[query private getJPAAnnotations(c : Class) : Set(String) =
c.getRelationshipAttributes()->collect(
    getJPAAnnotation()
)->asSet()
/]

[query private getJPAAnnotation(p : Property) : String =
Set{'OneToMany','ManyToOne','OneToOne','ManyToMany'}->any(
    a | (a = 'OneToMany' and p.isOne2Many())
    or  (a = 'ManyToOne' and p.isMany2One())
    or  (a = 'OneToOne' and p.isOne2One())
    or  (a = 'ManyToMany' and p.isMany2Many())
)
/]
